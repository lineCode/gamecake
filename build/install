cd `dirname $0`


LUAJITSRC=LuaJIT-2.1.0-beta2


PREMAKESRC=premake-4.4-beta5


SDLSRC=SDL2-2.0.8




# install dependencies if apt-get is available

if hash apt-get 2>/dev/null; then

	sudo libssl1.0-dev
	sudo apt-get install -y unzip build-essential libreadline-dev libgl1-mesa-dev libx11-dev libasound2-dev libudev-dev libssl-dev clang libpulse-dev
	sudo apt-get install -y libfreeimage-dev libopenal-dev libpango1.0-dev libsndfile-dev libudev-dev libasound2-dev libjpeg8-dev libwebp-dev automake libsndio-dev

#full SDL2 depends, so it builds as many drivers as possible

sudo apt-get install -y build-essential mercurial make cmake autoconf \
 automake libtool libasound2-dev libpulse-dev libaudio-dev libx11-dev libxext-dev \
 libxrandr-dev libxcursor-dev libxi-dev libxinerama-dev libxxf86vm-dev \
 libxss-dev libgl1-mesa-dev libesd0-dev libdbus-1-dev libudev-dev \
 libgles1-mesa-dev libgles2-mesa-dev libegl1-mesa-dev libibus-1.0-dev \
 libwayland-dev libxkbcommon-dev

fi




# make a version of premake4 and install it

if [ -f ${PREMAKESRC}.zip ] ; then
	echo "using ${PREMAKESRC}.zip"
else
	wget -O ${PREMAKESRC}.zip https://sourceforge.net/projects/premake/files/Premake/4.4/${PREMAKESRC}-src.zip
fi

rm -rf ${PREMAKESRC}
unzip ${PREMAKESRC}.zip
cd ${PREMAKESRC}/build/gmake.unix
make -j$(nproc)
cd ../../..
sudo cp ${PREMAKESRC}/bin/release/premake4 /usr/local/bin/




# make a version of luajit and install it

if [ -f ${LUAJITSRC}.tar.gz ] ; then
	echo "using ${LUAJITSRC}.tar.gz"
else
	wget -O ${LUAJITSRC}.tar.gz https://luajit.org/download/${LUAJITSRC}.tar.gz
fi

rm -rf ${LUAJITSRC}
tar zxvf ${LUAJITSRC}.tar.gz
cd ${LUAJITSRC}

if [ "`uname`" = "Darwin" ] ; then

#	make -j$(nproc) CC="gcc -m32" && sudo make install PREFIX=/usr/local
#	make clean
	sudo mkdir -p /usr/local/64
	make -j$(nproc) CC="gcc -m64" && sudo make install PREFIX=/usr/local/64

else

	make -j$(nproc) && sudo make install

fi

cd ..

#force static link by deleting the .so or dylib

sudo rm -f /usr/local/lib/libluajit-5.1.so
sudo rm -f /usr/local/64/lib/libluajit-5.1.dylib
sudo rm -f /usr/local/lib/libluajit-5.1.dylib






# make a version of SDL2 and install it

if [ -f ${SDLSRC}.tar.gz ] ; then
	echo "using ${SDLSRC}.tar.gz"
else
	wget -O ${SDLSRC}.tar.gz https://www.libsdl.org/release/${SDLSRC}.tar.gz
fi

rm -rf ${SDLSRC}
tar zxvf ${SDLSRC}.tar.gz
cd ${SDLSRC}

if [ "`uname`" = "Darwin" ] ; then

	./configure --enable-static --disable-esd --disable-arts --disable-video-directfb --disable-rpath --enable-alsa --enable-alsa-shared --enable-pulseaudio --enable-pulseaudio-shared --enable-x11-shared --enable-sdl-dlopen --disable-input-tslib --disable-render-metal

elif [ "`uname -m`" = "armv6l" ] ; then

	./configure --enable-static --disable-pulseaudio --disable-esd --disable-video-mir --disable-video-wayland --disable-video-x11 --disable-video-opengl --enable-sdl-dlopen --disable-sndio --disable-video-rpi

else

	./configure --enable-static --disable-esd --disable-arts --disable-video-directfb --disable-rpath --enable-alsa --enable-alsa-shared --enable-pulseaudio --enable-pulseaudio-shared --enable-x11-shared --enable-sdl-dlopen --disable-input-tslib --disable-sndio

fi

make -j$(nproc)
sudo make install
cd ..

#force static link by deleting the .so
sudo rm -f /usr/local/lib/libSDL2.so
sudo rm -f /usr/local/lib/libSDL2.dylib



